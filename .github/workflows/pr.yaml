name: TF PLAN

on:
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
    types:
      - opened
      - closed
      - synchronize

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  TERRAFORM_VERSION: 1.2.2
  TERRAFORM_PATH: ./terraform
  PLAN_NAME: plan-${{ github.head_ref }}

jobs:
  plan-infrastructure:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        stage: [ 'dev', 'production' ]
      fail-fast: true
    defaults:
      run:
        working-directory: ${{ format ('{0}/{1}', env.TERRAFORM_PATH, matrix.stage) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Config AWS Creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-key: ${{ env.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Setup TF
        uses: hashicorp/setup-terraform@v1
        with: 
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform format
        id: fmt
        continue-on-error: true
        run: |
          terraform fmt -check || ((($? > 0)) && echo "::set-output name=fmt_result::Terraform files are formatted incorrectly")

      - name: Terraform Init
        id: Init  
        run: terraform Init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out=${{ format ('{0}/{1}', matrix.stage, env.PLAN_NAME) }}
        
      - name: Upload Plan
        id: upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ format ('{0}/{1}', matrix.stage, env.PLAN_NAME) }}
          path: ${{env.TERRAFORM_PATH }}/${{ matrix.stage }}/${{ format ('{0}/{1}', matrix.stage, env.PLAN_NAME) }}


      - name: Post Plan to PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        
      - name: Download Artifact
        if: github.event.pull_request.merged = true
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow_conclusion: success
          pr: ${{ github.event.pull_request.number }}
          name: ${{ env.PLAN_NAME }}
          path: ${{env.TERRAFORM_PATH }}/${{ matrix.stage }}/${{ format ('{0}/{1}', matrix.stage, env.PLAN_NAME) }}

      - name: Finished
        id: finished
        run: |
          echo Workflow run was a success, proceed to manual dispatch to apply terraform.
          echo Please Work Dambit
          
